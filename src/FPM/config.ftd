-- import: ft

-- ft.toc:
$processor$: toc

# A Linguagem de ProgramaÃ§Ã£o Rust

- ğŸ‡§ğŸ‡· A linguagem de programaÃ§Ã£o Rust: /
- ğŸ‡§ğŸ‡· PrefÃ¡cio: /foreword/
- ğŸ‡§ğŸ‡· IntroduÃ§Ã£o: /ch00-00-introduction/

# ComeÃ§ando

- ğŸ‡§ğŸ‡· ComeÃ§ando: /ch01-00-getting-started/
  - ğŸ‡§ğŸ‡· InstalaÃ§Ã£o: /ch01-01-installation/
  - ğŸ‡§ğŸ‡· OlÃ¡, Mundo!: /ch01-02-hello-world/
  - ğŸ‡§ğŸ‡· OlÃ¡, Cargo!: /ch01-03-hello-cargo/

- ğŸ‡§ğŸ‡· Jogo de AdivinhaÃ§Ã£o: /ch02-00-guessing-game-tutorial/

- ğŸ‡§ğŸ‡· Conceitos Comuns de ProgramaÃ§Ã£o: /ch03-00-common-programming-concepts/
  - ğŸ‡§ğŸ‡· VariÃ¡veis e Mutabilidade: /ch03-01-variables-and-mutability/
  - ğŸ‡§ğŸ‡· Tipos de dados: /ch03-02-data-types/
  - ğŸ‡§ğŸ‡· FunÃ§Ãµes: /ch03-03-how-functions-work/
  - ğŸ‡§ğŸ‡· ComentÃ¡rios: /ch03-04-comments/
  - ğŸ‡§ğŸ‡· Controle de fluxo: /ch03-05-control-flow/

- ğŸ‡§ğŸ‡· Entendendo _Ownership_: /ch04-00-understanding-ownership/
  - ğŸ‡§ğŸ‡· O Que Ã‰ Ownership?: /ch04-01-what-is-ownership/
  - ğŸ‡§ğŸ‡· ReferÃªncias e _Borrowing_: /ch04-02-references-and-borrowing/
  - ğŸ‡§ğŸ‡· _Slices_: /ch04-03-slices/

- ğŸ‡§ğŸ‡· Usando Structs para Estruturar Dados Relacionados: /ch05-00-structs/
  - ğŸ‡§ğŸ‡· Definindo e Instanciando Structs: /ch05-01-defining-structs/
  - ğŸ‡§ğŸ‡· Um Exemplo de um Programa que usa Structs: /ch05-02-example-structs/
  - ğŸ‡§ğŸ‡· Sintaxe do MÃ©todo: /ch05-03-method-syntax/

- ğŸ‡§ğŸ‡· Enums e Casamento de PadrÃµes: /ch06-00-enums/
  - ğŸ‡§ğŸ‡· Definindo uma Enum: /ch06-01-defining-an-enum/
  - ğŸ‡§ğŸ‡· Operador `match`: /ch06-02-match/
  - ğŸ‡§ğŸ‡· Controle de Fluxo Conciso com `if let`: /ch06-03-if-let/

# Basic Rust Literacy

- ğŸ‡§ğŸ‡· MÃ³dulos: /ch07-00-modules/
  - ğŸ‡§ğŸ‡· `mod` e o Sistema de Arquivos: /ch07-01-mod-and-the-filesystem/
  - ğŸ‡§ğŸ‡· Controlando a Visibilidade com `pub`: /ch07-02-controlling-visibility-with-pub/
  - ğŸ‡§ğŸ‡· Importando nomes com `use`: /ch07-03-importing-names-with-use/

- ğŸ‡§ğŸ‡· ColeÃ§Ãµes comuns: /ch08-00-common-collections/
  - ğŸ‡§ğŸ‡· Vetores: /ch08-01-vectors/
  - ğŸ‡§ğŸ‡· Strings: /ch08-02-strings/
  - ğŸ‡§ğŸ‡· Hash Maps: /ch08-03-hash-maps/

- ğŸ‡§ğŸ‡· Tratamento de Erros: /ch09-00-error-handling/
  - ğŸ‡§ğŸ‡· Erros IrrecuperÃ¡veis com `panic!`: /ch09-01-unrecoverable-errors-with-panic/
  - ğŸ‡§ğŸ‡· Erros recuperÃ¡veis com `Result`: /ch09-02-recoverable-errors-with-result/
  - ğŸ‡§ğŸ‡· Entrar em `panic!` ou NÃ£o Entrar em `panic!`: /ch09-03-to-panic-or-not-to-panic/

- ğŸ‡§ğŸ‡· Tipos GenÃ©ricos, _Traits_, e Tempos de vida (_Lifetimes_: /ch10-00-generics/
  - ğŸ‡§ğŸ‡· Tipos GenÃ©ricos de Dados: /ch10-01-syntax/
  - ğŸ‡§ğŸ‡· Traits: Definindo Comportamento Compartilhado: /ch10-02-traits/ - NEED DEFAULT METHOD IMPLEMENTATIONS
  - ğŸ‡§ğŸ‡· Validating References with Lifetimes: /ch10-03-lifetime-syntax/

- Testing: /ch11-00-testing/
  - Writing tests: /ch11-01-writing-tests/
  - Running tests: /ch11-02-running-tests/
  - Test Organization: /ch11-03-test-organization/

- ğŸ‡§ğŸ‡· Um projeto de E/S: /ch12-00-an-io-project/
  - ğŸ‡§ğŸ‡· Aceitando Argumentos em Linha de Comando: /ch12-01-accepting-command-line-arguments/
  - ğŸ‡§ğŸ‡· Lendo um Arquivo: /ch12-02-reading-a-file/
  - ğŸ‡§ğŸ‡· RefatoraÃ§Ã£o para Melhorar a Modularidade e o Tratamento de Erros: /ch12-03-improving-error-handling-and-modularity/
  - ğŸ‡§ğŸ‡· Desenvolvendo a Biblioteca de Funcionalidades: /ch12-04-testing-the-librarys-functionality/
  - ğŸ‡§ğŸ‡· Trabalhando com VariÃ¡veis de Ambiente: /ch12-05-working-with-environment-variables/
  - ğŸ‡§ğŸ‡· Escrevendo Mensagens de Erro para Erro PadrÃ£o em Vez de SaÃ­da PadrÃ£o: /ch12-06-writing-to-stderr-instead-of-stdout/

# Pensando em Rust

- Functional Language Features in Rust: /ch13-00-functional-features/
  - Closures: /ch13-01-closures/
  - Iterators: /ch13-02-iterators/
  - Improving our I/O Project: /ch13-03-improving-our-io-project/
  - Performance: /ch13-04-performance/

- More about Cargo and Crates.io: /ch14-00-more-about-cargo/
  - Release Profiles: /ch14-01-release-profiles/
  - Publishing a Crate to Crates.io: /ch14-02-publishing-to-crates-io/
  - Cargo Workspaces: /ch14-03-cargo-workspaces/
  - Installing Binaries from Crates.io with `cargo install`: /ch14-04-installing-binaries/
  - Extending Cargo with Custom Commands: /ch14-05-extending-cargo/

- ğŸ‡§ğŸ‡· Ponteiros Inteligentes (Smart Pointers: /ch15-00-smart-pointers/
  - ğŸ‡§ğŸ‡· `Box<T>` Aponta para Dados no Heap e Tem Tamanho Conhecido: /ch15-01-box/
  - ğŸ‡§ğŸ‡· Tratando Ponteiros Inteligentes como ReferÃªncias Normais com a Trait `Deref`: /ch15-02-deref/
  - ğŸ‡§ğŸ‡· A Trait `Drop` Roda CÃ³digo durante a Limpeza: /ch15-03-drop/
  - ğŸ‡§ğŸ‡· `Rc<T>`, o Ponteiro Inteligente com Contagem de ReferÃªncias: /ch15-04-rc/
  - ğŸ‡§ğŸ‡· `RefCell<T>` e a Pattern de Mutabilidade Interior: /ch15-05-interior-mutability/
  - ğŸ‡§ğŸ‡· Ciclos de ReferÃªncias Podem Vazar MemÃ³ria: /ch15-06-reference-cycles/

- Concurrency: /ch16-00-concurrency/

- ğŸ‡§ğŸ‡· Rust Ã© uma linguagem orientada a objetos?: /ch17-00-oop/
  - ğŸ‡§ğŸ‡· O que significa orientado a objetos?: /ch17-01-oo/
  - ğŸ‡§ğŸ‡· Usando objetos trait que permitem valores de tipos diferentes: /ch17-02-trait-objects/
  - ğŸ‡§ğŸ‡· Implementando um padrÃ£o de projeto orientado a objetos: /ch17-03-oo-design-patterns/

# TÃ³picos avanÃ§ados

- Patterns: /ch18-00-patterns/ (perhaps an appendix?

- More Lifetimes: /ch19-00-more-lifetimes/ (perhaps merge this into advanced type system features?

- Advanced Type System Features: /ch20-00-advanced-types/ (perhaps called "Advanced Traits"?

- Appendix: /appendix-00/
  - Keywords: /appendix-01-keywords/
  - Operators: /appendix-02-operators/
  - Derivable Traits: /appendix-03-derivable-traits/
  - Nightly Rust: /appendix-04-nightly-rust/
  - Macros: /appendix-05-macros/
  - ğŸ‡§ğŸ‡· G - Como Ã© feito o Rust e o "Rust Nightly": /appendix-07-nightly-rust/

